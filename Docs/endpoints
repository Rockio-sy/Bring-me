createNewItem:
Description:
Create new item 
Type request : POST
API: bring-me/items/new
Input type:Reuqest Body :JSON
	EX:	{
	        "owner_id" : 21,
			"name" : "item1",
			"height" : 0.2,
			"long" : 0.1,
			"weight" : 0.3,
			"comments" : "keep it far of water",
			"origin_id" : 7,
			"destination" : 963,
			"detailed origin address" : "Izmaylovesky avu, 75/A",
			"photo" : "PHOTO_NAME.format"
		}

output type :JSON
	EX:	{
			"status": "success 201",
			"message": "Item created successfully",
			"item_id" : 123,
			"item": {
				"name" : "item1",
				"owner_id" : 21,
				"long" : 0.1,
				"height" : 0.2,
				"weight" : 0.3,
				"comments" : "keep it far of water",
				"origin" : 7,
				"destination" : 963,
				"detailed origin address" : "Izmaylovesky avu, 75/A",
				"photo" : "PHOTO_NAME.format"
			}
		}
Comments:
	status code should be 201 with message "Item created successfully"
	Check for every field and data type of it with ranges
	0 < Long,Hight < 200 cm
	0 < weight < 20 Kg
	Countries should be differents

expected errors might be like :
	"field ### is requierd", (499 Field is requierd)
	"Invalid value or input error", (422 Unprocessable Entity)
		
browsePhoto: 
Description: Allows user to upload photo to the server
Type request : POST
API bring-me/items/new/upload-photo
Input : RequestParam("photo")
	EX:
		------WebKitFromBoundryyXyXyXyXy
		Content-Disposition: form-data; name="photo", filename="example-photo.jpg"
		Content-Type: image/jpeg
		<binary photo data>
		------WebKitFromBoundryyXyXyXyXy
Output type: JSON
	EX:
	{
		"status": "success",
		"message": "Photo uploaded successfully",
		"photo_name": "userName_itemName/uploads/photos/example-photo.jpg:"
	}
Comments:
valid format jpg, Png
Status code is 200, message "photo uploaded successfully"
expected errors:
	"photo size is bigger than suppose", (413 content large)
	"photo type is not correct", (415 unsupported media)
	"photo size more than 1 byte", (414 too short)


getCountriesDropDownList: It is better to save the data in the front end as JSON and show the user, then get the id and send to the server-side!
Descriptoin: Show the list that has countries to choose
API: /bring-me/countries
Type request: GET
input: No Input
Output:
	EX:
	[
		{ "id" : 1, "name" : "united states"}, 
		{ "id" : #, "name" : "example country"}, 
	[
comments : status code 200


createNewFlight:
Descriptoin : Create new flight
API: bring-me/flight/new
Type request: POST
input type: JSON
	EX:
		{
		"origin" : 7,
		"destination" : 963,
		"airport": "Damascus-Airport",
		"available_weight" : 2.3,
		"departure-time" : "15:34",
		"arrival-time" : "18:50",
		"comments" : "about 20 min for check-in operation",
		"transit" : "True"
		}
output type: JSON
	EX:
		{
		"status": "success 201",
		"message": "Flight cerated successfully",
		"flight_id" : 135,
		"flight":{
				"origin" : "7",
				"destination" : "963",
				"airport": "Damascus-Airport",
				"available_weight" : "2.3 KG",
				"departure-time" : "15:34",
				"arrival-time" : "18:50",
				"comments" : "about 20 min for check-in operation",
				"transit" : "True"
			}
		}	
comments: Status code is 201 Created, with message "Flgiht created successfully"
expected errors:
	"field ### is requierd", (499 Field is requierd)
	Check the logic of every opeartoin (available weight lower than 20 Kg)


getFlgihtsList+filters:
Descriptoin: List all flights depends on user's filtration
API : bring-me/flights//{from}/{to}
Type request: GET
input: JSON query parameters or no input
	EX:
		{
			"origin" : 7,
			"destination" : 963
		}
output: JSON
	EX:
		{
		"status": "success 200",
		"list":{
				[
				{"flight-owner-id":421,"id":31,"origin" : 7,"destination" : 963}
				]
			}
		}
Comments: Status message is 200
	**For me: add the time stamp(keeps the same in back, front change)**


showFlight:
Descriptoin: Show the flight info
API : bring-me/flights/show{id}
type request: GET
input: No input
output:
	EX:
		{
		"status": "success 201",
		"flight_id" : 135,
		"flight":{
				"flight-owner-id":421,
				"origin" : 7,
				"destination" : 963,
				"airport": "Damascus-Airport",
				"available_weight" : 2.3,
				"departure-time" : "15:34",
				"arrival-time" : "18:50",
				"comments" : "about 20 min for check-in operation",
				"transit" : "True"
			}
		}
Comments: status message is 200
Check the id


showItem:
Descriptoin: Show specific item
API : bring-me/items/show{id}
type request: GET
input: No input
output: JSON
	EX:	{
			"status": "success 201",
			"item_id" : 123,
			"item": {
					"item-owner-id" : 312,
					"name" : "item1",
					"hight" : 0.2,
					"long" : 0.1,
					"weight" : 0.3,
					"comments" : "keep it far of water",
					"origin" : 7,
					"destination" : 963,
					"detailed origin address" : "Izmaylovesky avu, 75/A",
					"photo" : "PHOTO_ID"
				}
			}
Comments: status message is 200



getItemsList:
Descriptoin: list all items depends on user's filtratoin.
API: bring-me/items/list/{from}/{to}
Type request: GET
input: JSON or no input
output: JSON
	EX:
		{
			"origin" : "7",
			"destination" : "963"
		}
output: JSON
	EX:
		{
		"status": "success 200",
		"list":{
				[
			{"item-id":123, "origin" : 7,"destination" : 963}
			}
				]
		}	
Comments: Status message is 200



showRequest:
Descriptoin: Show the request info
API: bring-me/me/requests/{id}
type request: GET
input: JSON
	EX:
		{
			"id" : 421
		}
output: JSON
	EX:	{
			"status": "success 201",
			"request_id" : 421,
			"request": {
					"requester-id" : 312,
					"requested-id" : 312,
					"origin" : 7,
					"destination" : 963,
					"item-id" : 123,
					"flight-id" : 412,
					"comments" : "keep it far of water",
				   }
		}
Comments: status message is 200


showMyRequests:
description: List the reuqests that user has, with filtratoin.
API: bring-me/me/requests/{filter}
input: no input
output:
	EX:
		"status": "success 201",
		"requests":{
				[
				{"request-id":421,"origin" : 7,"destination" : 963}
				]
			}
Comments: status message is 200
	
showAccount:
Description: Check the user data (rate, name, address), with not contact info if there is no accepted request!!
API: bring-me/user/account/{id}
type request: GET
input: no input
output: JSON
	EX:
		{
			"first-name" : "Michel",
			"last-name" : "Johnict",
			"phone" : "+1 9986653247",
			"address" : "Monaco, jojo st., 43A",
			"email" : "asdtest@gmail.com",
			"rate-average" : 25/100,
			
		}
Comments: status message is 200


showMyAccount:
Description: Show the user's account data
API: bring-me/me/account
type request: GET
input: JSON
	EX:
		{
			"id":23
		}
output: JSON (maybe some data will be hidden)
	EX:
		{
			"first-name" : "Michel",
			"last-name" : "Johnict",
			"phone" : "+1 9986653247",
			"address" : "Monaco, jojo st., 43A",
			"rate-average" : 25/100,
		}
Comments: status message is 200

	
	
showRateList:
Description: Show the rate list of specific user
API: bring-me/user/account/{id}/rate/list
Type request: GET
input: JSON
	EX:
		{
			"id":24
		}
output: JSON
	EX:
		[
			{"rate-value":"3/5", "rate-message":"message", "rate-date":"15-10-2022"}
			{"rate-value":"5/5", "rate-message":"message", "rate-date":"1-12-2023"}
			{"rate-value":"1/5", "rate-message":"message", "rate-date":"16-1-2021"}
		]
Comments: status message is 200


resetPassword:
API: bring-m/me/account/reset
Type request: POST
input: JSON
	EX:
		{
			"old-password" : "passwordtest",
			"new-password" : "passwordtest",
			"retype-new-password" : "newPasswordTest"
		}

		
		
		
